import { BaseCommand } from '@adonisjs/core/ace'\nimport { CommandOptions } from '@adonisjs/core/types/ace'\nimport GmbPost from '#models/gmb_post'\nimport { calculatePrice } from '../utils/pricing_calculator.js'\n\nexport default class RecalculatePrices extends BaseCommand {\n  static commandName = 'pricing:recalculate'\n  static description = 'Recalcule les prix pour tous les posts qui ont des donn√©es IA'\n\n  static options: CommandOptions = {\n    startApp: true,\n  }\n\n  async run() {\n    this.logger.info('üîÑ D√©but du recalcul des prix...')\n\n    // R√©cup√©rer tous les posts qui ont des donn√©es IA mais pas de prix, ou qui ont un prix √† 0\n    const posts = await GmbPost.query()\n      .whereNotNull('model')\n      .whereNotNull('input_tokens')\n      .whereNotNull('output_tokens')\n      .where((query) => {\n        query.whereNull('price').orWhere('price', 0)\n      })\n\n    this.logger.info(`üìä ${posts.length} posts trouv√©s √† recalculer`)\n\n    let successCount = 0\n    let errorCount = 0\n\n    for (const post of posts) {\n      try {\n        const calculatedPrice = calculatePrice(\n          post.model,\n          post.input_tokens,\n          post.output_tokens\n        )\n\n        if (calculatedPrice !== null) {\n          post.price = calculatedPrice\n          await post.save()\n          successCount++\n          \n          this.logger.info(\n            `‚úÖ Post ${post.id}: ${calculatedPrice.toFixed(6)}$ (${post.model}, ${post.input_tokens}‚Üí${post.output_tokens} tokens)`\n          )\n        } else {\n          this.logger.warning(`‚ö†Ô∏è  Post ${post.id}: Impossible de calculer le prix pour le mod√®le ${post.model}`)\n          errorCount++\n        }\n      } catch (error) {\n        this.logger.error(`‚ùå Erreur pour le post ${post.id}: ${error.message}`)\n        errorCount++\n      }\n    }\n\n    this.logger.info(`‚ú® Recalcul termin√©: ${successCount} succ√®s, ${errorCount} erreurs`)\n  }\n}\n